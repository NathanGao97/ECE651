package edu.duke.zg79.battleship;

/**
 * This class handles textual display of
 * a Board (i.e., converting it to a string to show
 * to the user).
 * It supports two ways to display the Board:
 * one for the player's own board, and one for the 
 * enemy's board.
 */
public class BoardTextView {
  /**
   * The Board to display
   */
  private final Board toDisplay;

  /**
   * Constructs a BoardView, given the board it will display.
   * 
   * @param toDisplay is the Board to display
   * @throws IllegalArgumentException if the board is larger than 10x26.  
   */
  public BoardTextView(Board toDisplay) {
    this.toDisplay = toDisplay;
    if (toDisplay.getWidth() > 10 || toDisplay.getHeight() > 26) {
      throw new IllegalArgumentException(
          "Board must be no larger than 10x26, but is " + toDisplay.getWidth() + "x" + toDisplay.getHeight());
    }
  }

  public String displayMyOwnBoard() {
    StringBuilder board = new StringBuilder("");
    String header = this.makeHeader();
    String body = this.makeBody();
    board.append(header);
    board.append(body);
    board.append(header);
    return board.toString(); //this is a placeholder for the moment
 }

  public String makeBody() {
    StringBuilder ans = new StringBuilder("");
    String sep = "|";
    char letter = 'A';
    for (int i = 0; i < toDisplay.getHeight(); i++) {
      StringBuilder row = new StringBuilder("");
      row.append(letter);
      row.append(" ");
      for(int j = 1; j < toDisplay.getWidth(); j++) {
        row.append(" ");
        row.append(sep);
      }
      row.append("  ");
      row.append(letter);
      row.append("\n");
      ans.append(row);
      letter += 1;
    }
    return ans.toString();
  }

  
   /**
   * This makes the header line, e.g. 0|1|2|3|4\n
   * 
   * @return the String that is the header line for the given board
   */
  public String makeHeader() {
    StringBuilder ans = new StringBuilder("  "); // README shows two spaces at
    String sep=""; //start with nothing to separate, then switch to | to separate
    for (int i = 0; i < toDisplay.getWidth(); i++) {
      ans.append(sep);
      ans.append(i);
      sep = "|";
    }
    ans.append("\n");
    return ans.toString();
  }
}
